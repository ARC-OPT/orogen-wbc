--- name:default
# Perform numerical integration on the solver output, e.g. if output is acceleration type, integrate twice to get velocity and acceleration
integrate: True
# Type of QP solver used. Can be one of ['qpoases','qpswift','eiquadprog']
qp_solver: qpoases

--- name:rh5_single_leg
# Add multiple robot and/or object models.
robot_model:
    file: <%= "#{ENV['AUTOPROJ_CURRENT_ROOT']}/control/wbc/models/rh5/urdf/rh5_single_leg.urdf" %>

--- name:rh5_single_leg_hybrid
# Add multiple robot and/or object models.
robot_model:
    file: <%= "#{ENV['AUTOPROJ_CURRENT_ROOT']}/control/wbc/models/rh5/urdf/rh5_single_leg_hybrid.urdf" %>
    submechanism_file: <%= "#{ENV['AUTOPROJ_CURRENT_ROOT']}/control/wbc/models/rh5/hyrodyn/rh5_single_leg_hybrid.yml" %>
    type: hyrodyn

--- name:rh5_legs
# Configuration of the robot model. See wbc/core/RobotModelConfig.hpp for details.
robot_model:
  file: <%= "#{ENV['AUTOPROJ_CURRENT_ROOT']}/control/wbc/models/rh5/urdf/rh5_legs.urdf" %>
  submechanism_file: <%= "#{ENV['AUTOPROJ_CURRENT_ROOT']}/control/wbc/models/rh5/hyrodyn/rh5_legs.yml" %>
  floating_base: true
  contact_points:
      names: ["LLAnkle_FT", "LRAnkle_FT"]
      elements:
          - mu: 0.6
            active: 1
          - mu: 0.6
            active: 1

--- name:rh5
# Configuration of the robot model. See wbc/core/RobotModelConfig.hpp for details.
robot_model:
  file: <%= "#{ENV['AUTOPROJ_CURRENT_ROOT']}/control/wbc/models/rh5/urdf/rh5.urdf" %>
  submechanism_file: <%= "#{ENV['AUTOPROJ_CURRENT_ROOT']}/control/wbc/models/rh5/hyrodyn/rh5.yml" %>
  floating_base: true
  contact_points:
      names: ["LLAnkle_FT", "LRAnkle_FT"]
      elements:
          - mu: 0.6
            active: 1
          - mu: 0.6
            active: 1

initial_joint_weights:
    names: ["HeadPitch", "HeadRoll", "HeadYaw",
            "BodyPitch", "BodyRoll", "BodyYaw",
            "ALShoulder1", "ALShoulder2", "ALShoulder3", "ALElbow", "ALWristRoll", "ALWristPitch", "ALWristYaw",
            "ARShoulder1", "ARShoulder2", "ARShoulder3", "ARElbow", "ARWristRoll", "ARWristPitch", "ARWristYaw",
            "LLHip1", "LLHip2", "LLHip3", "LLKnee", "LLAnkleRoll", "LLAnklePitch",
            "LRHip1", "LRHip2", "LRHip3", "LRKnee", "LRAnkleRoll", "LRAnklePitch"]
    elements: [1,1,1,
               1,1,1,
               1,1,1,1,1,1,1,
               1,1,1,1,1,1,1,
               1,1,1,1,1,1,
               1,1,1,1,1,1]

--- name:single_leg_ctrl
# Configuration of constraints. The WbcVelocityTask will dynamically create the following input ports for each constraint:
#              Cartesian constraints:
#                  Reference Input (/base/samples/RigidBodyState):         ref_<constraint_name>
#                  Weights (/base/VectorXd):                               weight_<constraint_name>
#                  Activation function (double):                           activation_<constraint_name>
#                  Constraint pose output (/base/samples/RigidBodyState):  state_<constraint_name>
#                  Constraint output port (wbc/Constraint)                 constraint_<constraint_name>
#              Joint Space constraints:
#                  Reference Input (/base/samples/Joints):                 ref_<task_name>
#                  Weights (/base/VectorXd):                               weight_<task_name>
#                  Activation function (double):                           activation_<task_name>
#                  Current joint state output (base/samples/Joints):       state_<task_name>
#                  Constraint output port (wbc/Constraint)                 constraint_<constraint_name>
wbc_config:
    - name: "cart_position_ctrl"
      priority: 0
      type: cart
      root: "RH5_Root_Link"
      tip:  "LLAnklePitch_Link"
      ref_frame: "RH5_Root_Link"
      activation: 1.0
      weights: [1,1,1,1,1,1]

--- name:com_ctrl
# Configuration of constraints. The WbcVelocityTask will dynamically create the following input ports for each constraint:
#              Cartesian constraints:
#                  Reference Input (/base/samples/RigidBodyState):         ref_<constraint_name>
#                  Weights (/base/VectorXd):                               weight_<constraint_name>
#                  Activation function (double):                           activation_<constraint_name>
#                  Constraint pose output (/base/samples/RigidBodyState):  state_<constraint_name>
#                  Constraint output port (wbc/Constraint)                 constraint_<constraint_name>
#              Joint Space constraints:
#                  Reference Input (/base/samples/Joints):                 ref_<task_name>
#                  Weights (/base/VectorXd):                               weight_<task_name>
#                  Activation function (double):                           activation_<task_name>
#                  Current joint state output (base/samples/Joints):       state_<task_name>
#                  Constraint output port (wbc/Constraint)                 constraint_<constraint_name>
wbc_config:
    - name: "com_ctrl"
      priority: 0
      type: com
      activation: 1.0
      weights: [1,1,1]
